/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Plugin_H
#define Plugin_H

#include <thrift/TDispatchProcessor.h>
#include "plugin_types.h"



class PluginIf {
 public:
  virtual ~PluginIf() {}
  virtual void initialize() = 0;
  virtual void prepareForStart() = 0;
  virtual void start() = 0;
  virtual void active() = 0;
  virtual void passive() = 0;
  virtual void prepareForStop() = 0;
  virtual void stop() = 0;
  virtual void destroy() = 0;
};

class PluginIfFactory {
 public:
  typedef PluginIf Handler;

  virtual ~PluginIfFactory() {}

  virtual PluginIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PluginIf* /* handler */) = 0;
};

class PluginIfSingletonFactory : virtual public PluginIfFactory {
 public:
  PluginIfSingletonFactory(const boost::shared_ptr<PluginIf>& iface) : iface_(iface) {}
  virtual ~PluginIfSingletonFactory() {}

  virtual PluginIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PluginIf* /* handler */) {}

 protected:
  boost::shared_ptr<PluginIf> iface_;
};

class PluginNull : virtual public PluginIf {
 public:
  virtual ~PluginNull() {}
  void initialize() {
    return;
  }
  void prepareForStart() {
    return;
  }
  void start() {
    return;
  }
  void active() {
    return;
  }
  void passive() {
    return;
  }
  void prepareForStop() {
    return;
  }
  void stop() {
    return;
  }
  void destroy() {
    return;
  }
};


class Plugin_initialize_args {
 public:

  Plugin_initialize_args() {
  }

  virtual ~Plugin_initialize_args() throw() {}


  bool operator == (const Plugin_initialize_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Plugin_initialize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Plugin_initialize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_initialize_pargs {
 public:


  virtual ~Plugin_initialize_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_initialize_result {
 public:

  Plugin_initialize_result() {
  }

  virtual ~Plugin_initialize_result() throw() {}


  bool operator == (const Plugin_initialize_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Plugin_initialize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Plugin_initialize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_initialize_presult {
 public:


  virtual ~Plugin_initialize_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Plugin_prepareForStart_args {
 public:

  Plugin_prepareForStart_args() {
  }

  virtual ~Plugin_prepareForStart_args() throw() {}


  bool operator == (const Plugin_prepareForStart_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Plugin_prepareForStart_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Plugin_prepareForStart_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_prepareForStart_pargs {
 public:


  virtual ~Plugin_prepareForStart_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_prepareForStart_result {
 public:

  Plugin_prepareForStart_result() {
  }

  virtual ~Plugin_prepareForStart_result() throw() {}


  bool operator == (const Plugin_prepareForStart_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Plugin_prepareForStart_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Plugin_prepareForStart_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_prepareForStart_presult {
 public:


  virtual ~Plugin_prepareForStart_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Plugin_start_args {
 public:

  Plugin_start_args() {
  }

  virtual ~Plugin_start_args() throw() {}


  bool operator == (const Plugin_start_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Plugin_start_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Plugin_start_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_start_pargs {
 public:


  virtual ~Plugin_start_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_start_result {
 public:

  Plugin_start_result() {
  }

  virtual ~Plugin_start_result() throw() {}


  bool operator == (const Plugin_start_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Plugin_start_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Plugin_start_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_start_presult {
 public:


  virtual ~Plugin_start_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Plugin_active_args {
 public:

  Plugin_active_args() {
  }

  virtual ~Plugin_active_args() throw() {}


  bool operator == (const Plugin_active_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Plugin_active_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Plugin_active_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_active_pargs {
 public:


  virtual ~Plugin_active_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_active_result {
 public:

  Plugin_active_result() {
  }

  virtual ~Plugin_active_result() throw() {}


  bool operator == (const Plugin_active_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Plugin_active_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Plugin_active_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_active_presult {
 public:


  virtual ~Plugin_active_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Plugin_passive_args {
 public:

  Plugin_passive_args() {
  }

  virtual ~Plugin_passive_args() throw() {}


  bool operator == (const Plugin_passive_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Plugin_passive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Plugin_passive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_passive_pargs {
 public:


  virtual ~Plugin_passive_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_passive_result {
 public:

  Plugin_passive_result() {
  }

  virtual ~Plugin_passive_result() throw() {}


  bool operator == (const Plugin_passive_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Plugin_passive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Plugin_passive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_passive_presult {
 public:


  virtual ~Plugin_passive_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Plugin_prepareForStop_args {
 public:

  Plugin_prepareForStop_args() {
  }

  virtual ~Plugin_prepareForStop_args() throw() {}


  bool operator == (const Plugin_prepareForStop_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Plugin_prepareForStop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Plugin_prepareForStop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_prepareForStop_pargs {
 public:


  virtual ~Plugin_prepareForStop_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_prepareForStop_result {
 public:

  Plugin_prepareForStop_result() {
  }

  virtual ~Plugin_prepareForStop_result() throw() {}


  bool operator == (const Plugin_prepareForStop_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Plugin_prepareForStop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Plugin_prepareForStop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_prepareForStop_presult {
 public:


  virtual ~Plugin_prepareForStop_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Plugin_stop_args {
 public:

  Plugin_stop_args() {
  }

  virtual ~Plugin_stop_args() throw() {}


  bool operator == (const Plugin_stop_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Plugin_stop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Plugin_stop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_stop_pargs {
 public:


  virtual ~Plugin_stop_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_stop_result {
 public:

  Plugin_stop_result() {
  }

  virtual ~Plugin_stop_result() throw() {}


  bool operator == (const Plugin_stop_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Plugin_stop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Plugin_stop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_stop_presult {
 public:


  virtual ~Plugin_stop_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Plugin_destroy_args {
 public:

  Plugin_destroy_args() {
  }

  virtual ~Plugin_destroy_args() throw() {}


  bool operator == (const Plugin_destroy_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Plugin_destroy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Plugin_destroy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_destroy_pargs {
 public:


  virtual ~Plugin_destroy_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_destroy_result {
 public:

  Plugin_destroy_result() {
  }

  virtual ~Plugin_destroy_result() throw() {}


  bool operator == (const Plugin_destroy_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Plugin_destroy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Plugin_destroy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Plugin_destroy_presult {
 public:


  virtual ~Plugin_destroy_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PluginClient : virtual public PluginIf {
 public:
  PluginClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  PluginClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void initialize();
  void send_initialize();
  void recv_initialize();
  void prepareForStart();
  void send_prepareForStart();
  void recv_prepareForStart();
  void start();
  void send_start();
  void recv_start();
  void active();
  void send_active();
  void recv_active();
  void passive();
  void send_passive();
  void recv_passive();
  void prepareForStop();
  void send_prepareForStop();
  void recv_prepareForStop();
  void stop();
  void send_stop();
  void recv_stop();
  void destroy();
  void send_destroy();
  void recv_destroy();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PluginProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<PluginIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PluginProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_initialize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_prepareForStart(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_active(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_passive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_prepareForStop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_destroy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PluginProcessor(boost::shared_ptr<PluginIf> iface) :
    iface_(iface) {
    processMap_["initialize"] = &PluginProcessor::process_initialize;
    processMap_["prepareForStart"] = &PluginProcessor::process_prepareForStart;
    processMap_["start"] = &PluginProcessor::process_start;
    processMap_["active"] = &PluginProcessor::process_active;
    processMap_["passive"] = &PluginProcessor::process_passive;
    processMap_["prepareForStop"] = &PluginProcessor::process_prepareForStop;
    processMap_["stop"] = &PluginProcessor::process_stop;
    processMap_["destroy"] = &PluginProcessor::process_destroy;
  }

  virtual ~PluginProcessor() {}
};

class PluginProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PluginProcessorFactory(const ::boost::shared_ptr< PluginIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< PluginIfFactory > handlerFactory_;
};

class PluginMultiface : virtual public PluginIf {
 public:
  PluginMultiface(std::vector<boost::shared_ptr<PluginIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PluginMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PluginIf> > ifaces_;
  PluginMultiface() {}
  void add(boost::shared_ptr<PluginIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void initialize() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->initialize();
    }
    ifaces_[i]->initialize();
  }

  void prepareForStart() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->prepareForStart();
    }
    ifaces_[i]->prepareForStart();
  }

  void start() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start();
    }
    ifaces_[i]->start();
  }

  void active() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->active();
    }
    ifaces_[i]->active();
  }

  void passive() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->passive();
    }
    ifaces_[i]->passive();
  }

  void prepareForStop() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->prepareForStop();
    }
    ifaces_[i]->prepareForStop();
  }

  void stop() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop();
    }
    ifaces_[i]->stop();
  }

  void destroy() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->destroy();
    }
    ifaces_[i]->destroy();
  }

};



#endif
