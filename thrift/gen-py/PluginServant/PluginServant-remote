#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from PluginServant import PluginServant
from PluginServant.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void initialize(i32 level, string configuration)'
  print '  void prepareForStart()'
  print '  void start()'
  print '  void active()'
  print '  void passive()'
  print '  void stop()'
  print '  void prepareForUnload()'
  print '  void destroy(i32 level)'
  print '  i32 getState()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = PluginServant.Client(protocol)
transport.open()

if cmd == 'initialize':
  if len(args) != 2:
    print 'initialize requires 2 args'
    sys.exit(1)
  pp.pprint(client.initialize(eval(args[0]),args[1],))

elif cmd == 'prepareForStart':
  if len(args) != 0:
    print 'prepareForStart requires 0 args'
    sys.exit(1)
  pp.pprint(client.prepareForStart())

elif cmd == 'start':
  if len(args) != 0:
    print 'start requires 0 args'
    sys.exit(1)
  pp.pprint(client.start())

elif cmd == 'active':
  if len(args) != 0:
    print 'active requires 0 args'
    sys.exit(1)
  pp.pprint(client.active())

elif cmd == 'passive':
  if len(args) != 0:
    print 'passive requires 0 args'
    sys.exit(1)
  pp.pprint(client.passive())

elif cmd == 'stop':
  if len(args) != 0:
    print 'stop requires 0 args'
    sys.exit(1)
  pp.pprint(client.stop())

elif cmd == 'prepareForUnload':
  if len(args) != 0:
    print 'prepareForUnload requires 0 args'
    sys.exit(1)
  pp.pprint(client.prepareForUnload())

elif cmd == 'destroy':
  if len(args) != 1:
    print 'destroy requires 1 args'
    sys.exit(1)
  pp.pprint(client.destroy(eval(args[0]),))

elif cmd == 'getState':
  if len(args) != 0:
    print 'getState requires 0 args'
    sys.exit(1)
  pp.pprint(client.getState())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
