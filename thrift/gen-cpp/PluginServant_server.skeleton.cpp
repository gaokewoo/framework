// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "PluginServant.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class PluginServantHandler : virtual public PluginServantIf {
 public:
  PluginServantHandler() {
    // Your initialization goes here
  }

  void initialize(const int32_t level, const std::string& configuration) {
    // Your implementation goes here
    printf("initialize\n");
  }

  void prepareForStart() {
    // Your implementation goes here
    printf("prepareForStart\n");
  }

  void start() {
    // Your implementation goes here
    printf("start\n");
  }

  void active() {
    // Your implementation goes here
    printf("active\n");
  }

  void passive() {
    // Your implementation goes here
    printf("passive\n");
  }

  void stop() {
    // Your implementation goes here
    printf("stop\n");
  }

  void prepareForUnload() {
    // Your implementation goes here
    printf("prepareForUnload\n");
  }

  void destroy(const int32_t level) {
    // Your implementation goes here
    printf("destroy\n");
  }

  int32_t getState() {
    // Your implementation goes here
    printf("getState\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<PluginServantHandler> handler(new PluginServantHandler());
  shared_ptr<TProcessor> processor(new PluginServantProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

