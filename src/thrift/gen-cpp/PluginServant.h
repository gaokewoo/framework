/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PluginServant_H
#define PluginServant_H

#include <thrift/TDispatchProcessor.h>
#include "PluginServant_types.h"



class PluginServantIf {
 public:
  virtual ~PluginServantIf() {}
  virtual void initialize(const int32_t level, const std::string& configuration) = 0;
  virtual void prepareForStart() = 0;
  virtual void start() = 0;
  virtual void active() = 0;
  virtual void passive() = 0;
  virtual void stop() = 0;
  virtual void prepareForUnload() = 0;
  virtual void destroy(const int32_t level) = 0;
  virtual int32_t getState() = 0;
};

class PluginServantIfFactory {
 public:
  typedef PluginServantIf Handler;

  virtual ~PluginServantIfFactory() {}

  virtual PluginServantIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PluginServantIf* /* handler */) = 0;
};

class PluginServantIfSingletonFactory : virtual public PluginServantIfFactory {
 public:
  PluginServantIfSingletonFactory(const boost::shared_ptr<PluginServantIf>& iface) : iface_(iface) {}
  virtual ~PluginServantIfSingletonFactory() {}

  virtual PluginServantIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PluginServantIf* /* handler */) {}

 protected:
  boost::shared_ptr<PluginServantIf> iface_;
};

class PluginServantNull : virtual public PluginServantIf {
 public:
  virtual ~PluginServantNull() {}
  void initialize(const int32_t /* level */, const std::string& /* configuration */) {
    return;
  }
  void prepareForStart() {
    return;
  }
  void start() {
    return;
  }
  void active() {
    return;
  }
  void passive() {
    return;
  }
  void stop() {
    return;
  }
  void prepareForUnload() {
    return;
  }
  void destroy(const int32_t /* level */) {
    return;
  }
  int32_t getState() {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _PluginServant_initialize_args__isset {
  _PluginServant_initialize_args__isset() : level(false), configuration(false) {}
  bool level;
  bool configuration;
} _PluginServant_initialize_args__isset;

class PluginServant_initialize_args {
 public:

  PluginServant_initialize_args() : level(0), configuration() {
  }

  virtual ~PluginServant_initialize_args() throw() {}

  int32_t level;
  std::string configuration;

  _PluginServant_initialize_args__isset __isset;

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_configuration(const std::string& val) {
    configuration = val;
  }

  bool operator == (const PluginServant_initialize_args & rhs) const
  {
    if (!(level == rhs.level))
      return false;
    if (!(configuration == rhs.configuration))
      return false;
    return true;
  }
  bool operator != (const PluginServant_initialize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PluginServant_initialize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_initialize_pargs {
 public:


  virtual ~PluginServant_initialize_pargs() throw() {}

  const int32_t* level;
  const std::string* configuration;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_initialize_result {
 public:

  PluginServant_initialize_result() {
  }

  virtual ~PluginServant_initialize_result() throw() {}


  bool operator == (const PluginServant_initialize_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PluginServant_initialize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PluginServant_initialize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_initialize_presult {
 public:


  virtual ~PluginServant_initialize_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PluginServant_prepareForStart_args {
 public:

  PluginServant_prepareForStart_args() {
  }

  virtual ~PluginServant_prepareForStart_args() throw() {}


  bool operator == (const PluginServant_prepareForStart_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PluginServant_prepareForStart_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PluginServant_prepareForStart_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_prepareForStart_pargs {
 public:


  virtual ~PluginServant_prepareForStart_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_prepareForStart_result {
 public:

  PluginServant_prepareForStart_result() {
  }

  virtual ~PluginServant_prepareForStart_result() throw() {}


  bool operator == (const PluginServant_prepareForStart_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PluginServant_prepareForStart_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PluginServant_prepareForStart_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_prepareForStart_presult {
 public:


  virtual ~PluginServant_prepareForStart_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PluginServant_start_args {
 public:

  PluginServant_start_args() {
  }

  virtual ~PluginServant_start_args() throw() {}


  bool operator == (const PluginServant_start_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PluginServant_start_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PluginServant_start_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_start_pargs {
 public:


  virtual ~PluginServant_start_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_start_result {
 public:

  PluginServant_start_result() {
  }

  virtual ~PluginServant_start_result() throw() {}


  bool operator == (const PluginServant_start_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PluginServant_start_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PluginServant_start_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_start_presult {
 public:


  virtual ~PluginServant_start_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PluginServant_active_args {
 public:

  PluginServant_active_args() {
  }

  virtual ~PluginServant_active_args() throw() {}


  bool operator == (const PluginServant_active_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PluginServant_active_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PluginServant_active_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_active_pargs {
 public:


  virtual ~PluginServant_active_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_active_result {
 public:

  PluginServant_active_result() {
  }

  virtual ~PluginServant_active_result() throw() {}


  bool operator == (const PluginServant_active_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PluginServant_active_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PluginServant_active_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_active_presult {
 public:


  virtual ~PluginServant_active_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PluginServant_passive_args {
 public:

  PluginServant_passive_args() {
  }

  virtual ~PluginServant_passive_args() throw() {}


  bool operator == (const PluginServant_passive_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PluginServant_passive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PluginServant_passive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_passive_pargs {
 public:


  virtual ~PluginServant_passive_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_passive_result {
 public:

  PluginServant_passive_result() {
  }

  virtual ~PluginServant_passive_result() throw() {}


  bool operator == (const PluginServant_passive_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PluginServant_passive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PluginServant_passive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_passive_presult {
 public:


  virtual ~PluginServant_passive_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PluginServant_stop_args {
 public:

  PluginServant_stop_args() {
  }

  virtual ~PluginServant_stop_args() throw() {}


  bool operator == (const PluginServant_stop_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PluginServant_stop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PluginServant_stop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_stop_pargs {
 public:


  virtual ~PluginServant_stop_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_stop_result {
 public:

  PluginServant_stop_result() {
  }

  virtual ~PluginServant_stop_result() throw() {}


  bool operator == (const PluginServant_stop_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PluginServant_stop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PluginServant_stop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_stop_presult {
 public:


  virtual ~PluginServant_stop_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PluginServant_prepareForUnload_args {
 public:

  PluginServant_prepareForUnload_args() {
  }

  virtual ~PluginServant_prepareForUnload_args() throw() {}


  bool operator == (const PluginServant_prepareForUnload_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PluginServant_prepareForUnload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PluginServant_prepareForUnload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_prepareForUnload_pargs {
 public:


  virtual ~PluginServant_prepareForUnload_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_prepareForUnload_result {
 public:

  PluginServant_prepareForUnload_result() {
  }

  virtual ~PluginServant_prepareForUnload_result() throw() {}


  bool operator == (const PluginServant_prepareForUnload_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PluginServant_prepareForUnload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PluginServant_prepareForUnload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_prepareForUnload_presult {
 public:


  virtual ~PluginServant_prepareForUnload_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PluginServant_destroy_args__isset {
  _PluginServant_destroy_args__isset() : level(false) {}
  bool level;
} _PluginServant_destroy_args__isset;

class PluginServant_destroy_args {
 public:

  PluginServant_destroy_args() : level(0) {
  }

  virtual ~PluginServant_destroy_args() throw() {}

  int32_t level;

  _PluginServant_destroy_args__isset __isset;

  void __set_level(const int32_t val) {
    level = val;
  }

  bool operator == (const PluginServant_destroy_args & rhs) const
  {
    if (!(level == rhs.level))
      return false;
    return true;
  }
  bool operator != (const PluginServant_destroy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PluginServant_destroy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_destroy_pargs {
 public:


  virtual ~PluginServant_destroy_pargs() throw() {}

  const int32_t* level;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_destroy_result {
 public:

  PluginServant_destroy_result() {
  }

  virtual ~PluginServant_destroy_result() throw() {}


  bool operator == (const PluginServant_destroy_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PluginServant_destroy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PluginServant_destroy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_destroy_presult {
 public:


  virtual ~PluginServant_destroy_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PluginServant_getState_args {
 public:

  PluginServant_getState_args() {
  }

  virtual ~PluginServant_getState_args() throw() {}


  bool operator == (const PluginServant_getState_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PluginServant_getState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PluginServant_getState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PluginServant_getState_pargs {
 public:


  virtual ~PluginServant_getState_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PluginServant_getState_result__isset {
  _PluginServant_getState_result__isset() : success(false) {}
  bool success;
} _PluginServant_getState_result__isset;

class PluginServant_getState_result {
 public:

  PluginServant_getState_result() : success(0) {
  }

  virtual ~PluginServant_getState_result() throw() {}

  int32_t success;

  _PluginServant_getState_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const PluginServant_getState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PluginServant_getState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PluginServant_getState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PluginServant_getState_presult__isset {
  _PluginServant_getState_presult__isset() : success(false) {}
  bool success;
} _PluginServant_getState_presult__isset;

class PluginServant_getState_presult {
 public:


  virtual ~PluginServant_getState_presult() throw() {}

  int32_t* success;

  _PluginServant_getState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PluginServantClient : virtual public PluginServantIf {
 public:
  PluginServantClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  PluginServantClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void initialize(const int32_t level, const std::string& configuration);
  void send_initialize(const int32_t level, const std::string& configuration);
  void recv_initialize();
  void prepareForStart();
  void send_prepareForStart();
  void recv_prepareForStart();
  void start();
  void send_start();
  void recv_start();
  void active();
  void send_active();
  void recv_active();
  void passive();
  void send_passive();
  void recv_passive();
  void stop();
  void send_stop();
  void recv_stop();
  void prepareForUnload();
  void send_prepareForUnload();
  void recv_prepareForUnload();
  void destroy(const int32_t level);
  void send_destroy(const int32_t level);
  void recv_destroy();
  int32_t getState();
  void send_getState();
  int32_t recv_getState();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PluginServantProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<PluginServantIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PluginServantProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_initialize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_prepareForStart(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_active(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_passive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_prepareForUnload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_destroy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PluginServantProcessor(boost::shared_ptr<PluginServantIf> iface) :
    iface_(iface) {
    processMap_["initialize"] = &PluginServantProcessor::process_initialize;
    processMap_["prepareForStart"] = &PluginServantProcessor::process_prepareForStart;
    processMap_["start"] = &PluginServantProcessor::process_start;
    processMap_["active"] = &PluginServantProcessor::process_active;
    processMap_["passive"] = &PluginServantProcessor::process_passive;
    processMap_["stop"] = &PluginServantProcessor::process_stop;
    processMap_["prepareForUnload"] = &PluginServantProcessor::process_prepareForUnload;
    processMap_["destroy"] = &PluginServantProcessor::process_destroy;
    processMap_["getState"] = &PluginServantProcessor::process_getState;
  }

  virtual ~PluginServantProcessor() {}
};

class PluginServantProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PluginServantProcessorFactory(const ::boost::shared_ptr< PluginServantIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< PluginServantIfFactory > handlerFactory_;
};

class PluginServantMultiface : virtual public PluginServantIf {
 public:
  PluginServantMultiface(std::vector<boost::shared_ptr<PluginServantIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PluginServantMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PluginServantIf> > ifaces_;
  PluginServantMultiface() {}
  void add(boost::shared_ptr<PluginServantIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void initialize(const int32_t level, const std::string& configuration) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->initialize(level, configuration);
    }
    ifaces_[i]->initialize(level, configuration);
  }

  void prepareForStart() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->prepareForStart();
    }
    ifaces_[i]->prepareForStart();
  }

  void start() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start();
    }
    ifaces_[i]->start();
  }

  void active() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->active();
    }
    ifaces_[i]->active();
  }

  void passive() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->passive();
    }
    ifaces_[i]->passive();
  }

  void stop() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop();
    }
    ifaces_[i]->stop();
  }

  void prepareForUnload() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->prepareForUnload();
    }
    ifaces_[i]->prepareForUnload();
  }

  void destroy(const int32_t level) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->destroy(level);
    }
    ifaces_[i]->destroy(level);
  }

  int32_t getState() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getState();
    }
    return ifaces_[i]->getState();
  }

};



#endif
